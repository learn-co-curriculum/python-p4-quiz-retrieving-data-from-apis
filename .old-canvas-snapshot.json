{
  "quiz": {
    "id": 38370,
    "title": "Retrieving Data from APIs Quiz",
    "html_url": "https://learning.flatironschool.com/courses/6130/quizzes/38370",
    "mobile_url": "https://learning.flatironschool.com/courses/6130/quizzes/38370?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"python-p4-quiz-retrieving-data-from-apis\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/python-p4-quiz-retrieving-data-from-apis/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide.\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>\n\n<p>If you don't know the answer to a question, please do not guess. Instead, select\n\"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 7,
    "points_possible": 7.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_38370"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": null,
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/6130/quizzes/38370/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/6130/quizzes/38370/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/6130/quizzes/38370/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/6130/quizzes/38370/submission_versions",
    "assignment_id": 211769,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 17182,
    "show_correct_answers_last_attempt": true,
    "version_number": 3,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": null,
    "in_paced_course": false,
    "question_types": [

    ]
  },
  "questions": [
    {
      "id": 265240,
      "quiz_id": 38370,
      "quiz_group_id": null,
      "assessment_question_id": 453855,
      "position": null,
      "question_name": "Active Record: Basics",
      "question_type": "fill_in_multiple_blanks_question",
      "question_text": "<p>In order for Active Record to work, it is necessary to follow the naming\nconventions it is expecting. Specifically, the name of the class must be\n[answer1] and the name of the table must be [answer2].</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": "5199",
          "text": "singular",
          "comments": "",
          "comments_html": "",
          "weight": 100.0,
          "blank_id": "answer1"
        },
        {
          "id": "8995",
          "text": "plural",
          "comments": "",
          "comments_html": "",
          "weight": 100.0,
          "blank_id": "answer2"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 265241,
      "quiz_id": 38370,
      "quiz_group_id": null,
      "assessment_question_id": 453856,
      "position": null,
      "question_name": "Using .each",
      "question_type": "multiple_answers_question",
      "question_text": "<p>We have a variable <code>lunch_menu</code>, set equal to an array of lunch menu items:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">lunch_menu</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"pizza\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sandwich\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sushi\"</span><span class=\"p\">,</span> <span class=\"s2\">\"soup\"</span><span class=\"p\">,</span> <span class=\"s2\">\"salad\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Since you're super hungry and super excited about lunch, use the <code>.each</code> method\nto enumerate over the array and output a string to the terminal with each lunch\nmenu item with an <code>\"!\"</code> at the end.</p>\n\n<p>Which piece of code will achieve the desired result? Select all that apply:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": "4780",
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! Using <code>each</code> lets us access each element of the array in the block,\nand we can output a string by using <code>puts</code>.</p>",
          "weight": 100.0,
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">lunch_menu</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">lunch_item</span><span class=\"o\">|</span>\n  <span class=\"nb\">puts</span> <span class=\"n\">lunch_item</span> <span class=\"o\">+</span> <span class=\"s2\">\"!\"</span>\n<span class=\"k\">end</span>\n</code></pre></div>"
        },
        {
          "id": "7545",
          "text": "",
          "comments": "",
          "comments_html": "<p>This code would result in an error, since <code>lunch_menu</code> is an array, and we\ncan't us the <code>+</code> method to add a string to the array. How can we iterate over\neach element?</p>",
          "weight": 0.0,
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"nb\">puts</span> <span class=\"n\">lunch_menu</span> <span class=\"o\">+</span> <span class=\"s2\">\"!\"</span>\n</code></pre></div>"
        },
        {
          "id": "942",
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! Using <code>each</code> lets us access each element of the array in the block,\nand we can output a string by using <code>puts</code>.</p>",
          "weight": 100.0,
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">lunch_menu</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">lunch_item</span><span class=\"o\">|</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">lunch_item</span><span class=\"si\">}</span><span class=\"s2\">!\"</span>\n<span class=\"k\">end</span>\n</code></pre></div>"
        },
        {
          "id": "4066",
          "text": "",
          "comments": "",
          "comments_html": "<p>Using <code>each</code> lets us access each element of the array in the block, but this\nmethod doesn't output anything to the terminal since we aren't using <code>puts</code>.</p>",
          "weight": 0.0,
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">lunch_menu</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">lunch_item</span><span class=\"o\">|</span>\n  <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">lunch_item</span><span class=\"si\">}</span><span class=\"s2\">!\"</span>\n<span class=\"k\">end</span>\n</code></pre></div>"
        },
        {
          "id": "1849",
          "text": "",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 265242,
      "quiz_id": 38370,
      "quiz_group_id": null,
      "assessment_question_id": 453857,
      "position": null,
      "question_name": "Question 2",
      "question_type": "true_false_question",
      "question_text": "<p>When we run <code>git add .</code>, <strong>all</strong> files that have been created or modified since\nthe last commit are staged and will be included in the next commit.&nbsp;</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Not quite. Be sure to review the <code>.gitignore</code> source for this question. You'll\nget it next time!</p>",
          "text": "True",
          "weight": 0,
          "id": 5074
        },
        {
          "comments": "",
          "comments_html": "",
          "text": "False",
          "weight": 100,
          "id": 5412
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 265243,
      "quiz_id": 38370,
      "quiz_group_id": null,
      "assessment_question_id": 453858,
      "position": null,
      "question_name": "Question 1",
      "question_type": "short_answer_question",
      "question_text": "<p>A/an _____ is simply a well-defined procedure, or set of instructions, for\naccomplishing a specific task.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": "2440",
          "text": "algorithm",
          "comments": "",
          "comments_html": "",
          "weight": 100
        },
        {
          "id": "9189",
          "text": "Algorithm",
          "comments": "",
          "comments_html": "",
          "weight": 100
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 265244,
      "quiz_id": 38370,
      "quiz_group_id": null,
      "assessment_question_id": 453859,
      "position": null,
      "question_name": "Intro to React: Declarative Programming",
      "question_type": "matching_question",
      "question_text": "<p>Match the term with the correct description.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": "5783",
          "text": "Declarative Programming",
          "left": "Declarative Programming",
          "right": "Describes what the end result should be, not the specific actions or steps to\nget to that result.",
          "comments": "",
          "comments_html": "",
          "match_id": 7797
        },
        {
          "id": "9498",
          "text": "Imperative Programming",
          "left": "Imperative Programming",
          "right": "Explicitly describes the specific actions or steps for getting to the end\nresult.",
          "comments": "",
          "comments_html": "",
          "match_id": 9354
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": [
        {
          "text": "Describes what the end result should be, not the specific actions or steps to\nget to that result.",
          "match_id": 7797
        },
        {
          "text": "Explicitly describes the specific actions or steps for getting to the end\nresult.",
          "match_id": 9354
        },
        {
          "text": "I don't know.",
          "match_id": 9958
        }
      ],
      "matching_answer_incorrect_matches": "I don't know."
    },
    {
      "id": 265245,
      "quiz_id": 38370,
      "quiz_group_id": null,
      "assessment_question_id": 453860,
      "position": null,
      "question_name": "Object Inheritance: Modules",
      "question_type": "multiple_dropdowns_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">module</span> <span class=\"nn\">Talk</span>\n  <span class=\"k\">module</span> <span class=\"nn\">Phrases</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hello</span>\n      <span class=\"s2\">\"Hello!\"</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">goodbye</span>\n      <span class=\"s2\">\"Good bye!\"</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">module</span> <span class=\"nn\">Teachers</span>\n    <span class=\"k\">def</span> <span class=\"nf\">teach</span>\n      <span class=\"s2\">\"Repeat after me.\"</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The code sample above is an example of [a1] modules. To access the <code>Teachers</code>\nmodule to include it in a class, we would type include [a2].</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 3311,
          "text": "namespaced",
          "comments": "",
          "comments_html": "<p>Correct! Both <code>Teachers</code> and <code>Phrases</code> are namespaced inside of <code>Talk</code>. They\ncan be accessed using <code>::</code>.</p>",
          "weight": 100.0,
          "blank_id": "a1"
        },
        {
          "id": 3035,
          "text": "subclass inherited",
          "comments": "",
          "comments_html": "<p>There aren't any classes, nor any subclass inheritance, in the syntax above.\nYou might want to review the resource/s for this question.</p>",
          "weight": 0.0,
          "blank_id": "a1"
        },
        {
          "id": 4021,
          "text": "I don't know",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0,
          "blank_id": "a1"
        },
        {
          "id": 6728,
          "text": "Talk::Teachers",
          "comments": "",
          "comments_html": "<p>Correct! To <code>include</code> the <code>Teachers</code> module, we need to access it using <code>::</code>\non the module that contains it.</p>",
          "weight": 100.0,
          "blank_id": "a2"
        },
        {
          "id": 9799,
          "text": "Teachers::Talk",
          "comments": "",
          "comments_html": "<p>When using <code>::</code> to access a nested module, we put the module that contains the\nother module on the left side of the double colon.</p>",
          "weight": 0.0,
          "blank_id": "a2"
        },
        {
          "id": 3077,
          "text": "Talk.Teachers",
          "comments": "",
          "comments_html": "<p>Not quite. This looks more like we're trying to call a method on <code>Talk</code>.</p>",
          "weight": 0.0,
          "blank_id": "a2"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 265246,
      "quiz_id": 38370,
      "quiz_group_id": null,
      "assessment_question_id": 453861,
      "position": null,
      "question_name": "Question 3",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Calculate the <strong>time complexity</strong> for the following code using Big O notation:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">logLetter</span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">letter</span> <span class=\"k\">of</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">letter</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 1648,
          "text": "",
          "html": "<p>O(n)</p>",
          "comments": "",
          "comments_html": "<p>Correct! Since the algorithm needs to iterate through each letter of the input,\nthe time complexity will grow in linear proportion to the size of the input.</p>",
          "weight": 100.0
        },
        {
          "id": 927,
          "text": "",
          "html": "<p>O(1)</p>",
          "comments": "",
          "comments_html": "<p>Not quite. O(1) would mean the algorithm's runtime stays the same regardless of\nhow large the input is.</p>",
          "weight": 0.0
        },
        {
          "id": 2695,
          "text": "",
          "html": "<p>O(n²)</p>",
          "comments": "",
          "comments_html": "<p>Not quite. O(n²) would mean the algorithm's runtime grows exponentially as the\nsize of the input grows, like an algorithm that involved a nested loop.</p>",
          "weight": 0.0
        },
        {
          "id": 2305,
          "text": "",
          "html": "<p>O(log n)</p>",
          "comments": "",
          "comments_html": "<p>Not quite. O(log n) would mean that the algorithm's time complexity grows in a\nlogarithmic proportion to the size of the input (so an input of size 1 would\ntake 1 step, size 10 would take 2 steps, size 100 would take 3 steps, etc).</p>",
          "weight": 0.0
        },
        {
          "id": 7185,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}